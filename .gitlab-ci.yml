stages:
#  - configuration
#  - test
  - release
  - deploy


#configuration:
#  stage: configuration
#  only:
#    - master
#    - stage
#    - dev
#  script:
#    - cat ${CONFIG} > config/conf.json
#  allow_failure: false

#pylint:
#  stage: test
#  image: python:3.7-slim
#  before_script:
#    - mkdir -p public/badges public/lint
#    - echo undefined > public/badges/$CI_JOB_NAME.score
#    - pip install -r requirements.txt
#    - pip install pylint_gitlab
#  script:
#    - pylint --exit-zero --output-format=text $(find -type f -name "*.py" ! -path "**/.venv/**") | tee /tmp/pylint.txt
#    - sed -n 's/^Your code has been rated at \([-0-9.]*\)\/.*/\1/p' /tmp/pylint.txt > public/badges/$CI_JOB_NAME.score
#    - pylint --exit-zero --output-format=pylint_gitlab.GitlabCodeClimateReporter $(find -type f -name "*.py" ! -path "**/.venv/**") > codeclimate.json
#    - pylint --exit-zero --output-format=pylint_gitlab.GitlabPagesHtmlReporter $(find -type f -name "*.py" ! -path "**/.venv/**") > public/lint/index.html
#  after_script:
#    - anybadge --overwrite --label $CI_JOB_NAME --value=$(cat public/badges/$CI_JOB_NAME.score) --file=public/badges/$CI_JOB_NAME.svg 4=red 6=orange 8=yellow 10=green
#    - |
#      echo "Your score is: $(cat public/badges/$CI_JOB_NAME.score)"
#  artifacts:
#    paths:
#      - public
#    reports:
#      codequality: codeclimate.json
#    when: always
#  allow_failure: true

release:
  only:
    - master
    - stage
    - dev
  stage: release
  cache: {}
  image: docker:stable
  services:
    - docker:dind
  variables:
    DOCKER_HOST: tcp://localhost:2375
    DOCKER_TLS_CERTDIR: ""
    DOCKER_BUILDKIT: 1
    DOCKER_DRIVER: overlay2
  script:
    - cat ${CONFIG} > config/conf.json
    - docker info
    - docker build -t ${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID} .
    - echo ${CI_BUILD_TOKEN} | docker login -u ${CI_REGISTRY_USER} --password-stdin ${CI_REGISTRY}
    - docker push ${CI_REGISTRY_IMAGE}:${CI_PIPELINE_ID}
  allow_failure: false

.base_deploy:
  stage: deploy
  image: thisiskj/kubectl-envsubst
  variables:
    PUBLISH_PATH: /${CI_ENVIRONMENT_SLUG}/${CI_PROJECT_NAME}
  dependencies:
    - release
  script:
    - export APP_PORT=9090
    # CONFIGS
    - export CONFIG_CONTENT=$(cat ${CONFIG} | tr -d '\n')
    # IMAGE_PULL_SECRET
    - export REGISTRY_BASIC=$(echo -n ${CI_DEPLOY_USER}:${CI_DEPLOY_PASSWORD} | base64)
    - cat ./deploy/secrets/image-pull-secret.yml | envsubst | kubectl apply -f -
    - cat ./deploy/secrets/config-secret.yml | envsubst | kubectl apply -f -
    - cat ./deploy/network/service.yml | envsubst | kubectl apply -f -
    - cat ./deploy/network/ingress.yml | envsubst | kubectl apply -f -
    - cat ./deploy/deployment.yml | envsubst | kubectl apply -f -
    # Show Path
    - echo ${PUBLISH_PATH}
  allow_failure: false

deploy on dev:
  only:
    - dev
  environment:
    name: development
  variables:
    REPLICAS: 1
  extends: .base_deploy

deploy on stage:
  only:
    - stage
  environment:
    name: staging
  variables:
    REPLICAS: 1
  extends: .base_deploy

deploy on production:
  only:
    - master
  when: manual
  environment:
    name: production
  variables:
    REPLICAS: 1
  extends: .base_deploy
